// we need the latest version of bison
%require "3.7.6"

//the evaluated language is c++
%language "c++"

// Use a type-save variant data structure for storing valoares
%define api.value.type variant

// Generate the various `make_<TOKEN>` functions
%define api.token.constructor

// Include the common interfaces in the generated header
%code requires {
    #include "common.hpp"
}

//we need to declare the method yylex, defined in the
// Declare the `yylex` method, which will be defined in the lexer
%code {
    YY_DECL;
}

%%

%token CLASS_KEYWORD;

%token PUBLIC_KEYWORD;
%token PROTECTED_KEYWORD;
%token PRIVATE_KEYWORD;

%token FINAL_KEYWORD;
%token STATIC_KEYWORD;

%token IF_KEYWORD;
%token WHILE_KEYWORD;
%token RETURN_KEYWORD;

%token  PARANTEZA_DESCHISA;
%token  PARANTEZA_INCHISA;
%token ACOLADA_DESCHISA;
%token ACOLADA_INCHISA;
%token PARANTEZA_PATRATA_DESCHISA;
%token PARANTEZA_PATRATA_INCHISA;
%token EGAL;
%token VIRGULA;
%token PUNCTVIRGULA;
%token PUNCT;
%token PLUS;
%token MINUS;
%token MAI_MIC;
%token MAI_MARE;
%token EGAL_EGAL;
%token MAI_MARE_EGAL;
%token MAI_MIC_EGAL;
%token NOT_EGAL;

// Operator precedence
%left MAI_MIC MAI_MARE;
%left PLUS MINUS;

%token <std::string> IDENTIFIER;
%token <int> NUMBER;
%token <std::string> STRING;

//a c++ program could be made of more components
program:
    componente

//the components can be empty or made from another components
componente: 
    %empty | componenta componente

//the component is a class, a global variable or a global function
componenta:
    class_definitie | declarare_variabila | function_definitie


class_definitie:
    CLASS_KEYWORD IDENTIFIER
    ACOLADA_DESCHISA corp_clasa ACOLADA_INCHISA
    {
        std::cout << "Definire clasa cu numele:  " << $2 << '\n';
    }

%nterm corp_clasa;
corp_clasa:
    definitii

definitii:
    %empty | definitie definitii

definitie:
    definire_variabila_clasa | definire_metoda_clasa

definire_variabila_clasa:
    type_identifier name optional_initializer PUNCTVIRGULA
    {
        std::cout << "Definire variabila cu numele:  " << $2 << '\n';
    }

function_definitie:
    type_identifier name
    PARANTEZA_DESCHISA argumente_metoda  PARANTEZA_INCHISA
    ACOLADA_DESCHISA corp_metoda  ACOLADA_INCHISA
    {
        std::cout << "Definire functie: " << $2 << '\n';
    }
    

definire_metoda_clasa:
    modificator   type_identifier name
    PARANTEZA_DESCHISA argumente_metoda  PARANTEZA_INCHISA
    ACOLADA_DESCHISA corp_metoda ACOLADA_INCHISA
    {
        std::cout << "Definirea metodei: " << $3 << '\n';
    }

argumente_metoda:
    %empty
    | argument
    | argument VIRGULA argumente_metoda

argument:
    type_identifier IDENTIFIER

corp_metoda:
    statements

statements:
    %empty | statement statements

statement:
    declarare_variabila
    | asignare
    | apel_metoda PUNCTVIRGULA
    | instructiune_if
    | instructiune_while
    | return_statement
    
declarare_variabila:
    type_identifier name optional_initializer PUNCTVIRGULA
    {
        std::cout << "Definire variabila " << $2 << '\n';
    }

asignare:
    name initializer PUNCTVIRGULA
    {
        std::cout << "Asignare variabila " << $1 << '\n';
    }

apel_metoda:
    referire_metoda
     PARANTEZA_DESCHISA parametrii  PARANTEZA_INCHISA
    {
        std::cout << "Apelare metoda " << $1 << '\n';
    }
instructiune_if:
    IF_KEYWORD conditie block
    {
        std::cout << "Definire block if\n";
    }

instructiune_while:
    WHILE_KEYWORD conditie block
    {
        std::cout << "Definire block while\n";
    }

conditie:
     PARANTEZA_DESCHISA expresie  PARANTEZA_INCHISA

block:
    ACOLADA_DESCHISA statements ACOLADA_INCHISA



return_statement:
    RETURN_KEYWORD PUNCTVIRGULA
    | RETURN_KEYWORD expresie PUNCTVIRGULA
    {std::cout << "Intalnire cuvant return " << '\n';}

parametrii:
    %empty
    | valoare
    | valoare VIRGULA parametrii

valoare:
    name | expresie

%nterm expresie;
expresie:
    expresie PLUS expresie
    | expresie MINUS expresie
    | expresie MAI_MIC expresie
    | expresie MAI_MARE expresie
    | expresie EGAL_EGAL expresie
    | expresie NOT_EGAL expresie
    | expresie MAI_MARE_EGAL expresie
    | expresie MAI_MIC_EGAL expresie
    | apel_metoda
    | name
    | literal

%nterm <std::string> referire_metoda;
referire_metoda:
    name
    { $$ = $1; }
    | name PUNCT referire_metoda
    { $$ = $1 + "." + $3; }

%nterm <AccessModifier> modificator;
modificator:
    %empty
    { $$ = AccessModifier::DEFAULT; }
    | PUBLIC_KEYWORD
    { $$ = AccessModifier::PUBLIC; }
    | PROTECTED_KEYWORD
    { $$ = AccessModifier::PROTECTED; }
    | PRIVATE_KEYWORD
    { $$ = AccessModifier::PRIVATE; }




type_identifier:
    IDENTIFIER
    {
        std::cout << "Referinta obiect de tipul: " << $1 << '\n';
    }
    | IDENTIFIER PARANTEZA_PATRATA_DESCHISA PARANTEZA_PATRATA_INCHISA
    {
        std::cout << "Referinta array de tipul: " << $1 << "[]" << '\n';
    }

%nterm <std::string> name;
name:
    IDENTIFIER

optional_initializer:
    %empty | initializer

initializer:
    EGAL expresie

%nterm <std::string> literal;
literal:
    STRING | NUMBER
    { $$ = std::to_string($1); }

%%

namespace yy
{
    // Report an error to the user.
    void parser::error(const std::string& message)
    {
        std::cerr << message << '\n';
    }
}

int main(int argc, char* argv[])
{
    if (argc > 1)
    {
        freopen(argv[1], "r", stdin);
    }

    yy::parser cplusplus_parser;
    return cplusplus_parser();
}