

/* Disable unneeded features */
%option noyywrap nounput noinput batch

/* Enable debug mode */
/* %option debug */

%{
    // Include the common interface
    #include "common.hpp"

    // Include the parser's function definitions
    #include "cplusplus-parser.hpp"
%}

BLANK [[:space:]]

DIGIT [0-9]

INTEGER {DIGIT}+

IDENTIFIER [[:alpha:]]([[:alnum:]]|_)*

/* Define an exclusive mode for the multi line comment */
%x COMMENT

%%

"//".+ /* Ignore single line comment */

<INITIAL>"/*" BEGIN(COMMENT);
<COMMENT>"*/" BEGIN(INITIAL);
<COMMENT>.|"\n" /* Ignore comment contents */

class return yy::parser::make_CLASS_KEYWORD();

public return yy::parser::make_PUBLIC_KEYWORD();
protected return yy::parser::make_PROTECTED_KEYWORD();
private return yy::parser::make_PRIVATE_KEYWORD();


if return yy::parser::make_IF_KEYWORD();
while return yy::parser::make_WHILE_KEYWORD();
return return yy::parser::make_RETURN_KEYWORD();

"(" return yy::parser::make_PARANTEZA_DESCHISA();
")" return yy::parser::make_PARANTEZA_INCHISA();
"[" return yy::parser::make_PARANTEZA_PATRATA_DESCHISA();
"]" return yy::parser::make_PARANTEZA_PATRATA_INCHISA();
"{" return yy::parser::make_ACOLADA_DESCHISA();
"}" return yy::parser::make_ACOLADA_INCHISA();
"=" return yy::parser::make_EGAL();
"," return yy::parser::make_VIRGULA();
";" return yy::parser::make_PUNCTVIRGULA();
"." return yy::parser::make_PUNCT();
"+" return yy::parser::make_PLUS();
"-" return yy::parser::make_MINUS();
"<" return yy::parser::make_MAI_MIC();
">" return yy::parser::make_MAI_MARE();
"==" return yy::parser::make_EGAL_EGAL();
"!=" return yy::parser::make_NOT_EGAL();
">=" return yy::parser::make_MAI_MARE_EGAL();
"<=" return yy::parser::make_MAI_MIC_EGAL();

{INTEGER} return yy::parser::make_NUMBER(std::stoi(yytext));

\".+\" return yy::parser::make_STRING(yytext);

{IDENTIFIER} return yy::parser::make_IDENTIFIER(yytext);

[[:space:]] /* Ignore whitespace */

<<EOF>> return yy::parser::make_YYEOF();

%%